trigger:
  branches:
    include:
      - main

pr:
  branches:
    include:
      - main

pool:
  vmImage: 'ubuntu-latest'

variables:
  dockerRegistryServiceConnection: 'DockerHub'
  imageRepository: 'yuliakalinka/bestrong-web-api'
  dockerfile: 'Dockerfile'
  tag: '$(Build.BuildId)'
  terraformVersion: '1.3.9'
  terraformWorkingDirectory: '$(System.DefaultWorkingDirectory)/terraform'

stages:
- stage: Build
  displayName: 'Build and Push Docker Image'
  jobs:
  - job: BuildAndPush
    displayName: 'Build and Push Docker Image'
    steps:
    - checkout: self
      persistCredentials: true
      
    - task: Docker@2
      displayName: 'Build Docker image'
      inputs:
        command: build
        repository: $(imageRepository)
        dockerfile: $(dockerfile)
        buildContext: $(Build.SourcesDirectory)
        tags: |
          $(tag)
          latest

    - task: Docker@2
      displayName: 'Push Docker image'
      condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
      inputs:
        containerRegistry: $(docker-hub-connection)
        repository: $(imageRepository)
        command: push
        tags: |
          $(tag)
          latest

- stage: Deploy
  displayName: 'Deploy with Terraform'
  dependsOn: Build
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
  jobs:
  - job: TerraformDeploy
    displayName: 'Deploy infrastructure with Terraform'
    steps:
    - checkout: self
    
    - task: DownloadSecureFile@1
      name: envFile
      displayName: 'Download .env file'
      inputs:
        secureFile: '.env'
    
    - task: TerraformInstaller@0
      displayName: 'Install Terraform'
      inputs:
        terraformVersion: $(terraformVersion)

    - task: PowerShell@2
      displayName: 'Load Environment Variables'
      inputs:
        targetType: 'inline'
        script: |
          $envContent = Get-Content -Path "$(envFile.secureFilePath)"
          foreach($line in $envContent) {
            if($line.Trim() -and $line.Contains("=")) {
              $keyValue = $line.Split("=", 2)
              $key = $keyValue[0].Trim()
              $value = $keyValue[1].Trim()
              Write-Host "##vso[task.setvariable variable=$key]$value"
            }
          }

    - task: TerraformTaskV3@3
      displayName: 'Terraform Init'
      inputs:
        provider: 'azurerm'
        command: 'init'
        workingDirectory: $(terraformWorkingDirectory)
        backendServiceArm: 'bestrong-azure-connection'
        backendAzureRmResourceGroupName: 'bestrong-tfstate-rg'
        backendAzureRmStorageAccountName: 'bestrongtfstate'
        backendAzureRmContainerName: 'tfstate'
        backendAzureRmKey: 'terraform.tfstate'

    - task: TerraformTaskV3@3
      displayName: 'Terraform Plan'
      inputs:
        provider: 'azurerm'
        command: 'plan'
        workingDirectory: $(terraformWorkingDirectory)
        environmentServiceNameAzureRM: 'bestrong-azure-connection'
        commandOptions: '-var="docker_image_name=$(imageRepository):$(tag)" -var="client_id=$(TF_VAR_client_id)" 
          -var="client_secret=$(TF_VAR_client_secret)" -var="tenant_id=$(TF_VAR_tenant_id)" -var="subscription_id=$(TF_VAR_subscription_id)" 
          -var="docker_username=$(DOCKER_USERNAME)" -var="docker_password=$(DOCKER_PASSWORD)" -var="location=$(TF_VAR_location)" 
          -var="resource_group_name=$(TF_VAR_resource_group_name)" -var="service_plan_name=$(TF_VAR_service_plan_name)" 
          -var="web_app_name=$(TF_VAR_web_app_name)" -var="environment=$(TF_VAR_environment)" 
          -var="container_registry_name=$(TF_VAR_container_registry_name)" -var="service_plan_sku=$(TF_VAR_service_plan_sku)" -out=tfplan'

    - task: TerraformTaskV3@3
      displayName: 'Terraform Apply'
      inputs:
        provider: 'azurerm'
        command: 'apply'
        workingDirectory: $(terraformWorkingDirectory)
        environmentServiceNameAzureRM: 'bestrong-azure-connection'
        commandOptions: 'tfplan'
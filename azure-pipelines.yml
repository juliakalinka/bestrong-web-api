trigger:
  branches:
    include:
      - main

pr:
  branches:
    include:
      - main

resources:
  repositories:
    - repository: self
      type: github
      connection: github-bestrong-connection
      name: $(Build.Repository.Name)
      ref: $(Build.SourceBranch)

pool:
  vmImage: 'ubuntu-latest'

variables:
  terraformVersion: '1.5.7'
  workingDirectory: '$(System.DefaultWorkingDirectory)'
  group: terraform-variables  # Зміни на групу змінних

stages:
  - stage: PR_Validation
    displayName: 'PR Validation'
    condition: eq(variables['Build.Reason'], 'PullRequest')
    jobs:
      - job: ValidateTerraform
        displayName: 'Validate Terraform Configuration'
        steps:
          - checkout: self
          
          # Загальний крок: Встановлення Terraform
          - task: Bash@3
            displayName: 'Install Terraform $(terraformVersion)'
            inputs:
              targetType: 'inline'
              script: |
                wget -q https://releases.hashicorp.com/terraform/$(terraformVersion)/terraform_$(terraformVersion)_linux_amd64.zip
                unzip -q terraform_$(terraformVersion)_linux_amd64.zip
                sudo mv terraform /usr/local/bin/
                terraform version
          
          # Загальний крок: Завантаження environment-файлу
          - task: DownloadSecureFile@1
            name: envFile
            displayName: 'Download Terraform Environment File'
            inputs:
              secureFile: '.env'
          
          # Загальний крок: Перетворення environment-файлу в Unix формат
          - task: Bash@3
            displayName: 'Convert Environment File to Unix Format'
            inputs:
              targetType: 'inline'
              script: |
                tr -d '\r' < "$(envFile.secureFilePath)" > unix_env_file.tmp
                cp unix_env_file.tmp "$(envFile.secureFilePath)"
                rm unix_env_file.tmp
                echo "Environment file converted to Unix format"
          
          # Terraform Init
          - task: AzureCLI@2
            displayName: 'Terraform Init'
            inputs:
              azureSubscription: 'bestrong-azure-connection'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                set -a
                source $(envFile.secureFilePath)
                set +a
                
                terraform init \
                  -backend-config="storage_account_name=$(TF_STATE_SA)" \
                  -backend-config="container_name=$(TF_STATE_CONTAINER)" \
                  -backend-config="resource_group_name=$(TF_STATE_RG)"
              workingDirectory: '$(workingDirectory)'
          
          # Terraform Validate
          - task: AzureCLI@2
            displayName: 'Terraform Validate'
            inputs:
              azureSubscription: 'bestrong-azure-connection'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                set -a
                source $(envFile.secureFilePath)
                set +a
                
                terraform validate
              workingDirectory: '$(workingDirectory)'

          # Terraform Plan
          - task: AzureCLI@2
            displayName: 'Terraform Plan'
            inputs:
              azureSubscription: 'bestrong-azure-connection'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                set -a
                source $(envFile.secureFilePath)
                set +a
                
                terraform plan -out=tfplan
              workingDirectory: '$(workingDirectory)'

  - stage: CI_CD
    displayName: 'CI/CD Pipeline'
    condition: and(succeeded(), or(eq(variables['Build.SourceBranch'], 'refs/heads/main'), eq(variables['Build.Reason'], 'PullRequest')))
    jobs:
      - job: DeployTerraform
        displayName: 'Deploy Infrastructure'
        steps:
          - checkout: self
          
          # Загальний крок: Встановлення Terraform
          - task: Bash@3
            displayName: 'Install Terraform $(terraformVersion)'
            inputs:
              targetType: 'inline'
              script: |
                wget -q https://releases.hashicorp.com/terraform/$(terraformVersion)/terraform_$(terraformVersion)_linux_amd64.zip
                unzip -q terraform_$(terraformVersion)_linux_amd64.zip
                sudo mv terraform /usr/local/bin/
                terraform version
          
          # Загальний крок: Завантаження environment-файлу
          - task: DownloadSecureFile@1
            name: envFile
            displayName: 'Download Terraform Environment File'
            inputs:
              secureFile: 'terraform.env'
          
          # Загальний крок: Перетворення environment-файлу в Unix формат
          - task: Bash@3
            displayName: 'Convert Environment File to Unix Format'
            inputs:
              targetType: 'inline'
              script: |
                tr -d '\r' < "$(envFile.secureFilePath)" > unix_env_file.tmp
                cp unix_env_file.tmp "$(envFile.secureFilePath)"
                rm unix_env_file.tmp
                echo "Environment file converted to Unix format"
          
          # Terraform Init
          - task: AzureCLI@2
            displayName: 'Terraform Init'
            inputs:
              azureSubscription: 'bestrong-azure-connection'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                set -a
                source $(envFile.secureFilePath)
                set +a
                
                terraform init \
                  -backend-config="storage_account_name=$(TF_STATE_SA)" \
                  -backend-config="container_name=$(TF_STATE_CONTAINER)" \
                  -backend-config="resource_group_name=$(TF_STATE_RG)"
              workingDirectory: '$(workingDirectory)'

          # Terraform Validate
          - task: AzureCLI@2
            displayName: 'Terraform Validate'
            inputs:
              azureSubscription: 'bestrong-azure-connection'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                set -a
                source $(envFile.secureFilePath)
                set +a
                
                terraform validate
              workingDirectory: '$(workingDirectory)'

          # Terraform Apply
          - task: AzureCLI@2
            displayName: 'Terraform Apply'
            inputs:
              azureSubscription: 'bestrong-azure-connection'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                set -a
                source $(envFile.secureFilePath)
                set +a
                
                terraform apply -auto-approve tfplan
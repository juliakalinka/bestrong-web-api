trigger:
  batch: true
  branches:
    include:
      - main

pool:
  vmImage: ubuntu-latest

variables:
  - group: terraform-variables

jobs:
- job: DeployTerraform
  displayName: 'Deploy Terraform Infrastructure to Azure'
  steps:

  - task: DownloadSecureFile@1
    name: DownloadEnv
    displayName: 'Download .env Secure File'
    inputs:
      secureFile: '.env'

  - script: |
      echo "Fixing line endings in .env (Windows to Unix)..."
      sed -i 's/\r$//' $(DownloadEnv.secureFilePath)

      echo "Sourcing environment variables from .env..."
      set -a
      source $(DownloadEnv.secureFilePath)
      set +a
    displayName: 'Prepare Environment Variables'

  - task: AzureCLI@2
    displayName: 'Login to Azure using Azure CLI'
    inputs:
      azureSubscription: 'bestrong-azure-connection'
      scriptType: bash
      scriptLocation: inlineScript
      inlineScript: |
        echo "Azure CLI login successful"

  - script: |
      echo "Installing Terraform via apt..."
      sudo apt-get update
      sudo apt-get install -y gnupg software-properties-common curl lsb-release
      curl -fsSL https://apt.releases.hashicorp.com/gpg | gpg --dearmor | sudo tee /usr/share/keyrings/hashicorp-archive-keyring.gpg > /dev/null
      echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main" | \
        sudo tee /etc/apt/sources.list.d/hashicorp.list > /dev/null
      sudo apt-get update && sudo apt-get install terraform -y

      echo "Terraform version:"
      terraform -version
    displayName: 'Install Terraform via apt'

  - script: |
      echo "Attempting force unlock if state is locked..."
      terraform force-unlock -force $(terraform state lock id) || true
    workingDirectory: $(System.DefaultWorkingDirectory)/terraform
    displayName: 'Force Unlock Terraform State (if needed)'

  - script: |
      echo "Initializing Terraform..."
      terraform init \
        -backend-config="resource_group_name=bestrong-tfstate-rg" \
        -backend-config="storage_account_name=bestrongtfstate" \
        -backend-config="container_name=tfstate" \
        -backend-config="key=terraform.tfstate"
    workingDirectory: $(System.DefaultWorkingDirectory)/terraform
    displayName: 'Terraform Init'

  - script: |
      echo "Validating Terraform configuration..."
      terraform validate
    workingDirectory: $(System.DefaultWorkingDirectory)/terraform
    displayName: 'Terraform Validate'

  - script: |
      echo "Planning Terraform changes..."
      terraform plan -out=tfplan
    workingDirectory: $(System.DefaultWorkingDirectory)/terraform
    displayName: 'Terraform Plan'

  - script: |
      echo "Applying Terraform plan..."
      terraform apply -auto-approve tfplan
    workingDirectory: $(System.DefaultWorkingDirectory)/terraform
    displayName: 'Terraform Apply'